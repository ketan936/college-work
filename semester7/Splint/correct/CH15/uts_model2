#define N	3	/* nr of processes */

mtype = { Wakeme, Running };	/* process states  */

mtype pstate[N] = Running;

bit r_lock;
bit r_wanted;	/* resource state */
bit lk, sq;	/* locks */

#define freelock(x)	x = 0
#define waitlock(x)	(x == 0)
#define spinlock(x)	atomic { waitlock(x) -> x = 1 }

inline wakeup(x) {
	spinlock(sq);
	i = 0;
	do :: i < N ->
		if
		:: pstate[i] == Wakeme ->
			pstate[i] = Running
		:: else	-> i++
		fi
	   :: else -> break
	od;
	freelock(sq)
}
inline sleepl(y, x) {
	spinlock(sq);
	freelock(x);
	pstate[_pid] = Wakeme;
	freelock(sq);
	(pstate[_pid] == Running);
	spinlock(x)
}

active [N] proctype user()
{  pid i;
   do :: spinlock(lk);      /* spinlock(&lk);    */
      do :: r_lock ->       /* while (r->lock) { */
            r_wanted = 1;   /*   r->wanted = 1;  */
            sleepl(_, lk)   /*   sleepl(r, &lk); */
         :: else -> break
      od;                   /* }                 */
      r_lock = 1;           /* r->lock = 1;      */
      freelock(lk);         /* freelock(&lk);    */

R:    /* use resource r */
   
      r_lock = 0;           /* r->lock = 0;      */
      waitlock(lk);         /* waitlock(&lk);    */
      if
      :: r_wanted ->        /* if (r->wanted) {  */
         r_wanted = 0;      /*   r->wanted = 0;  */
#ifdef FIX
         waitlock(lk);      /*   waitlock(&lk);  */
#endif
         wakeup(_);         /*   wakeup(r);      */
      :: else
      fi                    /* }                 */
   od
}

#define p	(pstate[0] == Wakeme)
#define q	(user[1]@R)
#define r	(user[2]@R)

never {    /* <>[]p && []<>q && []<>r */
T0_init:
        if
        :: ((p) && (q) && (r)) -> goto accept_S1149
        :: ((p) && (q)) -> goto T2_S1149
        :: ((p)) -> goto T0_S1149
        :: (1) -> goto T0_init
        fi;
accept_S1149:
        if
        :: ((p)) -> goto T0_S1149
        fi;
T2_S1149:
        if
        :: ((p) && (r)) -> goto accept_S1149
        :: ((p)) -> goto T2_S1149
        fi;
T0_S1149:
        if
        :: ((p) && (q) && (r)) -> goto accept_S1149
        :: ((p) && (q)) -> goto T2_S1149
        :: ((p)) -> goto T0_S1149
        fi;
}
